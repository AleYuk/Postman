{
	"info": {
		"_postman_id": "94e9887a-d8cb-4908-8436-4bbee695537e",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/first\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"var user_info = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"name_manual = Aliaksander\", function () {\r",
							"    pm.expect(user_info.name).to.eql(\"Aliaksander\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"age_manual = 33\", function () {\r",
							"    pm.expect(user_info.age).to.eql(\"33\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary_manual = 5000\", function () {\r",
							"    pm.expect(user_info.salary).to.eql(5000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var user_info_request = request.data;\r",
							"// console.log(\"user_info_request = \", user_info_request)\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name_auto from request\", function () {\r",
							"    pm.expect(user_info.name).to.eql(user_info_request.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age_auto from request\", function () {\r",
							"    pm.expect(user_info.age).to.eql(user_info_request.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var user_request_salary = parseInt(user_info_request.salary)\r",
							"pm.test(\"salary_auto from request\", function () {\r",
							"    pm.expect(user_info.salary).to.eql(user_request_salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log (\"Family = \", user_info.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"salary * 4\", function () {\r",
							"    pm.expect(user_info.family.u_salary_1_5_year).to.eql(user_request_salary * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Aliaksander",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"var user_info = pm.response.json()\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var user_info_request = {};\r",
							"pm.request.url.query.all().forEach((param) => { user_info_request[param.key] = param.value});\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name from response = name from request\", function () {\r",
							"    pm.expect(user_info.name).to.eql(user_info_request.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age from response = age from request\", function () {\r",
							"    pm.expect(user_info.age).to.eql(user_info_request.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var user_request_salary = parseInt(user_info_request.salary)\r",
							"pm.test(\"salary from response = salary from request\", function () {\r",
							"    pm.expect(user_info.salary).to.eql(user_request_salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(user_info.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog.name exist\", function () {\r",
							"    pm.expect(user_info.family.pets.dog.name).to.exist;\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog.age exist\", function () {\r",
							"    pm.expect(user_info.family.pets.dog.age).to.exist;\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog.name = Luky\", function () {\r",
							"    pm.expect(user_info.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog.age = 4\", function () {\r",
							"    pm.expect(user_info.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Aliaksander&age=33&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Aliaksander"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"var user_info = pm.response.json()\r",
							"console.log(\"user_info = \", user_info)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var user_info_request = {};\r",
							"pm.request.url.query.all().forEach((param) => { user_info_request[param.key] = param.value });\r",
							"console.log(\"user_info_request\", user_info_request)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name from response = name from request\", function () {\r",
							"    pm.expect(user_info.name).to.eql(user_info_request.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"var user_info_request_age = parseInt(user_info_request.age)\r",
							"pm.test(\"age from response = age from request\", function () {\r",
							"    pm.expect(user_info.age).to.eql(user_info_request_age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"salary from request = \", user_info_request.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"salary from response = \", user_info.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"0.salary from response = \", user_info.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"1.salary from response = \", user_info.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"2.salary from response = \", user_info.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"var user_info_request_salary = parseInt(user_info_request.salary)\r",
							"pm.test(\"0.salary from response = salary from request\", function () {\r",
							"    pm.expect(user_info.salary[0]).to.eql(user_info_request_salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"var user_info_response_salary_1 = parseInt(user_info.salary[1])\r",
							"pm.test(\"1.salary from response = salary from request\", function () {\r",
							"    pm.expect(user_info_response_salary_1).to.eql(user_info_request_salary * 2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"var user_info_response_salary_2 = parseInt(user_info.salary[2])\r",
							"pm.test(\"2.salary from response = salary from request\", function () {\r",
							"    pm.expect(user_info_response_salary_2).to.eql(user_info_request_salary * 3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name   - сделано в интерфейсе Postman\r",
							"// 16. Создать в окружении переменную age    - сделано в интерфейсе Postman\r",
							"// 17. Создать в окружении переменную salary - сделано в интерфейсе Postman\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", user_info.name)\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", user_info.age)\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", user_info.salary)\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var step;\r",
							"for (step = 0; step < 3; step++) {\r",
							"  console.log(step,'salary =', user_info.salary[step]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Aliaksander&age=33&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Aliaksander"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		}
	]
}